{"version":3,"sources":["index.tsx"],"names":["VideoCompressEventEmitter","NativeEventEmitter","NativeModules","VideoCompressor","NativeVideoCompressor","Video","compress","fileUrl","options","onProgress","uuid","subscription","addListener","event","data","progress","modifiedOptions","bitrate","compressionMethod","maxSize","result","removeSubscription","backgroundUpload","url","written","total","Platform","OS","includes","replace","upload","method","httpMethod","headers","activateBackgroundTask","onExpired","deactivateBackgroundTask","removeAllListeners"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport declare enum FileSystemUploadType {\n  BINARY_CONTENT = 0,\n  MULTIPART = 1,\n}\n\nexport declare type FileSystemAcceptedUploadHttpMethod =\n  | 'POST'\n  | 'PUT'\n  | 'PATCH';\nexport type compressionMethod = 'auto' | 'manual';\ntype videoCompresssionType = {\n  bitrate?: number;\n  compressionMethod?: compressionMethod;\n};\n\nexport declare enum FileSystemSessionType {\n  BACKGROUND = 0,\n  FOREGROUND = 1,\n}\n\nexport declare type HTTPResponse = {\n  status: number;\n  headers: Record<string, string>;\n  body: string;\n};\n\nexport declare type FileSystemUploadOptions = (\n  | {\n      uploadType?: FileSystemUploadType.BINARY_CONTENT;\n    }\n  | {\n      uploadType: FileSystemUploadType.MULTIPART;\n      fieldName?: string;\n      mimeType?: string;\n      parameters?: Record<string, string>;\n    }\n) & {\n  headers?: Record<string, string>;\n  httpMethod?: FileSystemAcceptedUploadHttpMethod;\n  sessionType?: FileSystemSessionType;\n};\n\nexport type VideoCompressorType = {\n  compress(\n    fileUrl: string,\n    options?: videoCompresssionType,\n    onProgress?: (progress: number) => void\n  ): Promise<string>;\n  backgroundUpload(\n    url: string,\n    fileUrl: string,\n    options: FileSystemUploadOptions,\n    onProgress?: (writtem: number, total: number) => void\n  ): Promise<any>;\n  activateBackgroundTask(onExpired?: (data: any) => void): Promise<any>;\n  deactivateBackgroundTask(): Promise<any>;\n};\n\nconst VideoCompressEventEmitter = new NativeEventEmitter(\n  NativeModules.VideoCompressor\n);\n\nconst NativeVideoCompressor = NativeModules.VideoCompressor;\n\nconst Video: VideoCompressorType = {\n  compress: async (\n    fileUrl: string,\n    options?: {\n      bitrate?: number;\n      compressionMethod?: compressionMethod;\n      maxSize?: number;\n    },\n    onProgress?: (progress: number) => void\n  ) => {\n    const uuid = uuidv4();\n    let subscription = null;\n    try {\n      if (onProgress) {\n        subscription = VideoCompressEventEmitter.addListener(\n          'videoCompressProgress',\n          (event: any) => {\n            if (event.uuid === uuid) {\n              onProgress(event.data.progress);\n            }\n          }\n        );\n      }\n      const modifiedOptions: {\n        uuid: string;\n        bitrate?: number;\n        compressionMethod?: compressionMethod;\n        maxSize?: number;\n      } = { uuid };\n      if (options?.bitrate) modifiedOptions.bitrate = options?.bitrate;\n      if (options?.compressionMethod) {\n        modifiedOptions.compressionMethod = options?.compressionMethod;\n      } else {\n        modifiedOptions.compressionMethod = 'manual';\n      }\n      if (options?.maxSize) {\n        modifiedOptions.maxSize = options?.maxSize;\n      } else {\n        modifiedOptions.maxSize = 640;\n      }\n      const result = await NativeVideoCompressor.compress(\n        fileUrl,\n        modifiedOptions\n      );\n      return result;\n    } finally {\n      if (subscription) {\n        VideoCompressEventEmitter.removeSubscription(subscription);\n      }\n    }\n  },\n  backgroundUpload: async (url, fileUrl, options, onProgress) => {\n    const uuid = uuidv4();\n    let subscription = null;\n    try {\n      if (onProgress) {\n        subscription = VideoCompressEventEmitter.addListener(\n          'VideoCompressorProgress',\n          (event: any) => {\n            if (event.uuid === uuid) {\n              onProgress(event.data.written, event.data.total);\n            }\n          }\n        );\n      }\n      if (Platform.OS === 'android' && fileUrl.includes('file://')) {\n        fileUrl = fileUrl.replace('file://', '');\n      }\n      const result = await NativeVideoCompressor.upload(fileUrl, {\n        uuid,\n        method: options.httpMethod,\n        headers: options.headers,\n        url,\n      });\n      return result;\n    } finally {\n      if (subscription) {\n        VideoCompressEventEmitter.removeSubscription(subscription);\n      }\n    }\n  },\n  activateBackgroundTask(onExpired?) {\n    if (onExpired) {\n      const subscription = VideoCompressEventEmitter.addListener(\n        'backgroundTaskExpired',\n        (event: any) => {\n          onExpired(event);\n          VideoCompressEventEmitter.removeSubscription(subscription);\n        }\n      );\n    }\n    return NativeVideoCompressor.activateBackgroundTask({});\n  },\n  deactivateBackgroundTask() {\n    VideoCompressEventEmitter.removeAllListeners('backgroundTaskExpired');\n    return NativeVideoCompressor.deactivateBackgroundTask({});\n  },\n} as VideoCompressorType;\n\nexport default Video;\n"]}